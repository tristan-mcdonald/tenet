/*
    function to add `margin-top` to an item if another child precedes it.
    this must be used on a single selector so that the adjacent sibling
    selector takes effect; it will not work on nested selectors.
*/
mt($margin-top = $sp)
    * + &
        margin-top $margin-top
/*
    function to add `margin-left` to an item if another child precedes it.
    this must be used on a single selector so that the adjacent sibling
    selector takes effect; it will not work on nested selectors.
*/
ml($margin-left = $sp)
    * + &
        margin-left $margin-left
/*
    function to add `margin-right` to an item if it is not the last child.
    this is useful on list items with a `flex-row` value of `row`,
    and saves us overwriting a rule for the last child.
*/
mr($margin-right = $sp)
    &:not(:last-child)
        margin-right $margin-right
/*
    function for a centered element, which should be a child of an element
    with a `max-width` value of 100%. the remaining percentage of
    viewport width on each side gives a tidy alternative to specifying
    an explicit `padding` value.
*/
contain(
    $width     = 92%,
    $max-width = $contain
)
    margin-right auto
    margin-left auto
    width $width
    max-width $max-width
/*
    function for resetting `button` element styles, so that
    we can start styling them from a sensible blank state.
*/
button-reset()
    cursor pointer
    border none
    background-color transparent
    padding 0
    font inherit
    color inherit

/*
    function to avoid by default giving an element an unintended
    z-index context when giving an element a `position` of `absolute`.
*/
pos-a($z-index = auto)
    position absolute
    z-index $z-index

/*
    function to avoid by default giving an element an unintended
    z-index context when giving an element a `position` of `relative`.
*/
pos-r($z-index = auto)
    position relative
    z-index $z-index

/*
    function to avoid by default giving an element an unintended
    z-index context when giving an element a `position` of `fixed`.
*/
pos-f($z-index = auto)
    position fixed
    z-index $z-index

/*
    function to avoid by default giving an element an unintended
    z-index context when giving an element a `position` of `sticky`.
*/
pos-s($z-index = auto)
    position sticky
    z-index $z-index

/*
    function to add a Material Design-style `box-shadow` which expands on interaction.
    `$inset-color` takes a darker step of the element's `background-color`.
    note the colon, which is Stylus syntax for multi-line properties.
*/
bxsh-interaction($inset-color)
    box-shadow: // @stylint ignore
        0 1px 4px modify-hsla($color: $cl--text--heading, $a: -.96),
        0 1px 2px modify-hsla($color: $cl--text--heading, $a: -.8),
        inset 0 -1px 2px $inset-color

    &:hover
    &:focus
        box-shadow: // @stylint ignore
            0 14px 28px modify-hsla($color: $cl--text--heading, $a: -.8),
            0 10px 10px modify-hsla($color: $cl--text--heading, $a: -.96)
/*
    function for non-interactive Material Design-style `box-shadow`.
*/
bxsh-static()
    box-shadow: // @stylint ignore
        0 1px 4px modify-hsla($color: $cl--text--heading, $a: -.96),
        0 1px 2px modify-hsla($color: $cl--text--heading, $a: -.8)
/*
    function to display list items in a flex-based repeating grid.
    this function should be applied to an element containing a
    list, which will usually be a `nav` element.
*/
flex-grid(
    $maximum-columns    = 3,
    $margin-top         = 2%,
    $margin-top-stacked = 4vw,
    $margin-left        = 2%,
    $change-to-two      = 3,
    $change-to-three    = 5,
    $change-to-four     = 6
)

    &__list
        display flex
        flex-wrap wrap
        flex-direction row
        align-items stretch
        justify-content space-between

    &__item
        flex 0 0 100%
        +above($change-to-two)
            flex 0 0 ((100 - $margin-left) / 2)%

        if $maximum-columns >= 3
            +above($change-to-three)
                flex 0 0 ((100 - ($margin-left * 2)) / 3)%

        if $maximum-columns >= 4
            +above($change-to-four)
                flex 0 0 ((100 - ($margin-left * 3)) / 4)%

        &:nth-child(even)
            if $maximum-columns >= 3
                +between($change-to-two, ($change-to-three - 1))
                    margin-left $margin-left
            else
                +above($change-to-two)
                    margin-left $margin-left

        if $maximum-columns >= 4
            &:nth-child(4n+2)
            &:nth-child(4n+3)
            &:nth-child(4n+4)
                +above($change-to-four)
                    margin-left $margin-left

            if $change-to-four - $change-to-three > 1
                &:nth-child(3n+2)
                &:nth-child(3n+3)
                    +between($change-to-three, ($change-to-four - 1))
                        margin-left $margin-left

            else
                &:nth-child(3n+2)
                &:nth-child(3n+3)
                    +at($change-to-three)
                        margin-left $margin-left

        if $maximum-columns == 3
            &:nth-child(3n+2)
            &:nth-child(3n+3)
                +above($change-to-three)
                    margin-left $margin-left

        &:nth-child(n+2)
            +below(($change-to-two - 1))
                margin-top $margin-top-stacked

        if $maximum-columns >= 3
            &:nth-child(n+3)
                +below(($change-to-three - 1))
                    margin-top $margin-top
        else
            &:nth-child(n+3)
                +above($change-to-two)
                    margin-top $margin-top

        if $maximum-columns >= 4
            &:nth-child(n+5)
                +above($change-to-four)
                    margin-top $margin-top

            if $change-to-four - $change-to-three > 1
                &:nth-child(n+4)
                    +between($change-to-three, ($change-to-four - 1))
                        margin-top $margin-top

            else
                &:nth-child(n+4)
                    +at($change-to-three)
                        margin-top $margin-top

        if $maximum-columns == 3
            &:nth-child(n+4)
                +above($change-to-three)
                    margin-top $margin-top

        &:last-child
            +above($change-to-two)
                margin-right auto
